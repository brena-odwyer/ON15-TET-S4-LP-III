const professora = new Object()
professora.nome = "Lilit"
professora.sobrenome = "Bandeira"
professora.cidade = "S√£o Paulo"

//console.log(professora)

const aluna = {
    nome: { primeiro: "Gabriela", segundo: "Lemos" },
    _id: 1232541231234,
    idade: 20,
    cidade: { nascimento: "Palmas",
            viveu: ["S√£o Paulo", "Salvador"]},
    interesses: ["m√∫sica", "animes"],
    saudacao: () => console.log("ol√°, meninas"),

};

// o sauda√ß√£o √© um m√©todo porque √© uma fun√ß√£o

// console.log(aluna.cidade.viveu[1])
// o 1 da salvador, porque o 0 √© S√£o Paulo, dentro da array. A contagem dos √≠ndices come√ßa no 0.
// Al√©m de criar objetos, semana passada tamb√©m vimos nota√ß√£o de ponto.
// Que √© igual esse aluna.cidade.viveu esse ponto √© a nota√ß√£o, pra achar a info que queremos.
// Encapuslamento √© o escopo do objeto, n√£o pode ser acessado fora.

// Temos o objeto aluna com v√°rias propriedades (nome, cidades, interesses...). Quando eu acessar esse objeto a partir de um banco de dados,
// eu sei que vou precisar de uma informa√ß√£o espec√≠fica. Se eu quero s√≥ o nome e o id do objeto, n√£o preciso puxar o objeto inteiro (console.log(aluna)),
// faz mais sentido desestruturar, ou seja, separar todas as propriedades do objeto e vendo s√≥ as que eu quero.
// Existe uma sintaxe pra isso, a√≠ eu pego s√≥ o nome e o id:

// let { nome, _id} = aluna

// console.log(nome)

// A√≠ vem como uma vari√°vel isolada, s√≥ o objeto nome. Vai trazer Gabriela Lemos.

// console.log(nome.primeiro)

// Vai trazer Gabriela no terminal, porque o objeto foi desestruturado ent√£o vai conseguir acessar a propriedade espec√≠fica.
// Isso √© √∫til quando temos um objeto gigante.
// Voc√™ coloca o que voc√™ quer do objeto dentro da chave, porque voc√™ n√£o quer acessar tudo.
// Se a chave for um sring a nota√ß√£o de ponto n√£o funciona, a√≠ tem que usar a nota√ß√£o de colchete.

// Objeto dade e seus m√©todos:
let hoje = new Date(); // isso √© um objeto date, ent√£o tem propriedades (info) e m√©todos (a√ß√µes)
let dia =hoje.getDate()
let mes =hoje.getMonth () // vai trazer o m√™s. (Colocando mes no console.log(mes))
let ano = hoje.getFullYear() // vai trazer o ano colocando console.log(ano).
console.log(hoje) // volta assim no terminal: 2022-04-16T14:09:27.133Z. Do jeito americano.
console.log(`${dia}/${mes}/${ano}`) // aqui vai trazer no console 16/3/2022, estaos em abril, mas o array conta janeiro como 0. Se colcoar mes + 1 ali vai mostrar o mes certo.
// Mas tamb√©m existe um m√©todo espec√≠fico para fazer isso baseado no lugar onde estamos = hoje.toLocaleDateString("pt-BR").

let dataFormatada = hoje.toLocaleDateString("pt-BR")
console.log(dataFormatada)

// console.log(hoje); // 2022-04-16T10:56:49.693Z

// const dia = hoje.getDate();
// const mes = hoje.getMonth();
// const ano = hoje.getFullYear();

// console.log(`${dia}/${mes + 1}/${ano}`); // 16/04/2022 ü§î

// const dataFormatada = hoje.toLocaleDateString("pt-BR");
// console.log(dataFormatada); // 16/04/2022

const options = {
  weekday: "long",
  year: "numeric",
  month: "long",
  day: "numeric",
};

const dataLonga = hoje.toLocaleDateString("pt-BR", options);
console.log(dataLonga); // s√°bado, 16 de abril de 2022

// Tem tudo isso no MDN - https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Global_Objects/Date